<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		addedToStage="onAddedToStage(event)" backgroundColor="0x000000" title="VideoPlay">
	
	<fx:Script>
		<![CDATA[
			protected function policyTabButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				navigator.popView();
				removeEvent();
			}
			
			import mx.core.UIComponent;
			
			import spark.components.Group;
			private var FILE_NAME:String = "";
			private static const INTERVAL:Number = 500;
			private static const BORDER:Number = 20;
			
			private var legend:TextField = new TextField();
			private var sv:StageVideo;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var rc:Rectangle;
			private var video:Video;
			private var thumb:Shape;
			private var interactiveThumb:Sprite;
			private var totalTime:Number;
			
			private var videoWidth:int;
			private var videoHeight:int;
			private var outputBuffer:String = new String();
			private var rect:Rectangle = new Rectangle(0, 0, 0, BORDER);
			private var videoRect:Rectangle = new Rectangle(0, 0, 0, 0);
			private var gotStage:Boolean;
			private var stageVideoInUse:Boolean;
			private var classicVideoInUse:Boolean;
			private var accelerationType:String;
			private var infos:String = new String();
			private var available:Boolean;
			private var inited:Boolean;
			private var played:Boolean;
			private var container:Sprite;
			private var ui:UIComponent;
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onAddedToStage(event:Event):void
			{
				FILE_NAME = this.data.toString();
				// Scaling
				stage.scaleMode = StageScaleMode.NO_SCALE;
				stage.align = StageAlign.TOP_LEFT;
				
				ui = new UIComponent();
				addElement(ui);
				
				legend.autoSize = TextFieldAutoSize.LEFT;
				
				// Debug infos
				//				legend.multiline = true;
				//				legend.background = true;
				//				legend.backgroundColor = 0xFFFFFFFF;
				//				ui.addChild(legend);
				
				// Thumb seek Bar
				thumb = new Shape();
				//				
				interactiveThumb = new Sprite();
				interactiveThumb.addChild(thumb);
				ui.addChild(interactiveThumb);
				
				// Connections
				nc = new NetConnection();
				nc.connect(null);
				ns = new NetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
				ns.client = this;
				
				// Screen
				video = new Video();
				video.smoothing = true;
				
				// Video Events
				// the StageVideoEvent.STAGE_VIDEO_STATE informs you if StageVideo is available or not
				stage.addEventListener(StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY, onStageVideoState);
				// in case of fallback to Video, we listen to the VideoEvent.RENDER_STATE event to handle resize properly and know about the acceleration mode running
				video.addEventListener(VideoEvent.RENDER_STATE, videoStateChange);
				
				// Input Events
				stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				stage.addEventListener(Event.RESIZE,  onResize);
				stage.addEventListener(MouseEvent.CLICK, onClick);
			}
			
			private function removeEvent():void{
				ns.pause();
				
				stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				stage.removeEventListener(Event.RESIZE,  onResize);
				stage.removeEventListener(MouseEvent.CLICK, onClick);
				stage.removeEventListener(Event.ENTER_FRAME, onFrame);
				stage.removeEventListener(StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY, onStageVideoState);
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onNetStatus(event:NetStatusEvent):void
			{
				//				if ( event.info == "NetStream.Play.StreamNotFound" )
				//					legend.text = "Video file passed, not available!";
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onFrame(event:Event):void 
			{
				var ratio:Number = (ns.time / totalTime) * (stage.stageWidth - (BORDER << 1));
				rect.width = ratio;
				thumb.graphics.clear();
				thumb.graphics.beginFill(0xFF0000);
				thumb.graphics.drawRect(rect.x, rect.y, rect.width, rect.height);	
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onClick(event:MouseEvent):void
			{
				if ( event.stageY >= interactiveThumb.y - BORDER && event.stageX <= stage.stageWidth - BORDER )
				{
					var seekTime:Number = (stage.mouseX - BORDER) * ( totalTime / (stage.stageWidth - (BORDER << 1) ) );
					ns.seek( seekTime );	
				}
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onKeyDown(event:KeyboardEvent):void
			{	
				if ( event.keyCode == Keyboard.O )
				{
					if ( available )
						// We toggle the StageVideo on and off (fallback to Video and back to StageVideo)
						toggleStageVideo(inited=!inited);
					
				} else if ( event.keyCode == Keyboard.F )
				{
					stage.displayState = StageDisplayState.FULL_SCREEN;
				} else if ( event.keyCode == Keyboard.SPACE )
				{
					ns.togglePause();
				}
			}
			
			/**
			 * 
			 * @param width
			 * @param height
			 * @return 
			 * 
			 */		
			private function getVideoRect(width:uint, height:uint):Rectangle
			{	
				var videoWidth:uint = width;
				var videoHeight:uint = height;
				var scaling:Number = Math.min ( stage.stageWidth / videoWidth, stage.stageHeight / videoHeight );
				
				videoWidth *= scaling, videoHeight *= scaling;
				
				var posX:uint = stage.stageWidth - videoWidth >> 1;
				var posY:uint = stage.stageHeight - videoHeight >> 1;
				
				videoRect.x = posX;
				videoRect.y = posY;
				videoRect.width = videoWidth;
				videoRect.height = videoHeight;
				
				return videoRect;
			}
			
			/**
			 * 
			 * 
			 */		
			private function resize ():void
			{	
				if ( stageVideoInUse )
				{
					// Get the Viewport viewable rectangle
					rc = getVideoRect(sv.videoWidth, sv.videoHeight);
					// set the StageVideo size using the viewPort property
					sv.viewPort = rc;
				} else 
				{
					// Get the Viewport viewable rectangle
					rc = getVideoRect(video.videoWidth, video.videoHeight);
					// Set the Video object size
					video.width = rc.width;
					video.height = rc.height;
					video.x = rc.x, video.y = rc.y;
				}
				
				interactiveThumb.x = BORDER, interactiveThumb.y = stage.stageHeight - (BORDER << 1);
				//				legend.text = infos;
			}
			
			/**
			 * 
			 * @param evt
			 * 
			 */		
			public function onMetaData ( evt:Object ):void
			{
				totalTime = evt.duration;
				stage.addEventListener(Event.ENTER_FRAME, onFrame);
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onStageVideoState(event:StageVideoAvailabilityEvent):void
			{	
				// Detect if StageVideo is available and decide what to do in toggleStageVideo
				toggleStageVideo(available = inited = (event.availability == StageVideoAvailability.AVAILABLE));
			}
			
			/**
			 * 
			 * @param on
			 * 
			 */		
			private function toggleStageVideo(on:Boolean):void
			{	
				infos = "StageVideo Running (Direct path) : " + on + "\n";
				
				// If we choose StageVideo we attach the NetStream to StageVideo
				if (on) 
				{
					stageVideoInUse = true;
					if ( sv == null )
					{
						sv = stage.stageVideos[0];
						sv.addEventListener(StageVideoEvent.RENDER_STATE, stageVideoStateChange);
					}
					sv.attachNetStream(ns);
					if (classicVideoInUse)
					{
						// If we use StageVideo, we just remove from the display list the Video object to avoid covering the StageVideo object (always in the background)
						stage.removeChild ( video );
						classicVideoInUse = false;
					}
				} else 
				{
					// Otherwise we attach it to a Video object
					if (stageVideoInUse)
						stageVideoInUse = false;
					classicVideoInUse = true;
					video.attachNetStream(ns);
					ui.addChild(video);
				}
				
				if ( !played ) 
				{
					played = true;
					ns.play(FILE_NAME);
				}
			} 
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function onResize(event:Event):void
			{
				resize();		
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function stageVideoStateChange(event:StageVideoEvent):void
			{	
				infos += "StageVideoEvent received\n";
				infos += "Render State : " + event.status + "\n";
				resize();
			}
			
			/**
			 * 
			 * @param event
			 * 
			 */		
			private function videoStateChange(event:VideoEvent):void
			{	
				infos += "VideoEvent received\n";
				infos += "Render State : " + event.status + "\n";
				resize();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:navigationContent>
		<s:Button label="BACK" click="policyTabButton_clickHandler(event)"/>
	</s:navigationContent>
</s:View>
